# golangci configuration
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m
  # include test files or not, default is true
  tests: false
  # skip test files and protobuf generated code
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*\\.pb\\.gw\\.go$"
  skip-dirs:
    - src/external_libs
  skip-dirs-use-default: false
  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: readonly
  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: true

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

  exhaustive:
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: true

  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 30

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 30

  rowserrcheck:
    packages:
      - github.com/jmoiron/sqlx

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    # level 0
    - bodyclose
    - deadcode
    - errcheck
    - errorlint
    - exhaustive
    - exportloopref
    - gosec
    - govet
    - nilerr
    - rowserrcheck
    - sqlclosecheck
    - staticcheck
    - typecheck
    # level 1
    - cyclop
    - durationcheck
    - forcetypeassert
    - gocognit
    - gocyclo
    - ineffassign
    - makezero
    - prealloc
    - structcheck
    - unconvert
    - unparam
    - unused
    - varcheck
    - wastedassign
    # level 2
    - dogsled
    - dupl
    - forbidigo
    - gosimple
    - gochecknoinits
    - goconst
    - gocritic
    - godox
    - golint
    - goerr113
    - ifshort
    - revive
    - stylecheck
    # level 3
    - gofmt
    #- gci
    - goimports
    - gomoddirectives
    - importas
    - lll
    - nakedret
    - nolintlint
    - paralleltest
    - thelper
    - tparallel

    #disable:
    #- asciicheck
    #- depguard
    #- exhaustivestruct
    #- gofumpt
    #- goheader
    #- gochecknoglobals
    #- gomnd
    #- gomodguard
    #- godot
    #- goprintffuncname
    #- funlen
    #- interfacer
    #- maligned
    #- misspell
    #- nestif
    #- nlreturn
    #- noctx
    #- predeclared
    #- scopelint
    #- testpackage
    #- whitespace
    #- wsl
    #- wrapcheck

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # https://github.com/go-critic/go-critic/issues/926
    - linters:
        - gocritic
      text: "unnecessaryDefer:"